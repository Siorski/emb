W RAZIE CZEGO: 
bundle exec rake db:rollback &&
rails destroy model stories &&
rails g resource story title:string body:text author:string &&
rake db:migrate

1. rails new emb -m http://emberjs.com/edge_template.rb
2. edit gemfile: rm coffe-rails, therubyracer, jbuilder, turbolinks, remove //= require turbolinks from app/assets/javascripts/application.js 
3. rails g ember:bootstrap
4. rails g ember:install --head
5. rails g resource story title:string body:text
6. rake db:migrate
7. rails g ember:route stories
8. rails g ember:template stories
9. put this.resource('stories'); in router.js
10. put {{outlet}} in application.handlebars

11. put Emb.ApplicationAdapter = DS.RESTAdapter; in application.js

12. put 
model: function(){
		return this.store.find('story');
} in stories_routes.js

13. def index
		render json: Story.all
	end
	stories_controller.rb

14. <ul>
	{{#each}}
	<li> {{title}} </li>
	{{/each}}
</ul>
stories.handlebars
15. rails g ember:route story
16. rails g ember:template story
17. this.resource('story', {path: '/stories/:story_id'}); in 
router.js

18. <h2> {{title}} </h2>

<div>
	{{body}}
</div>
story.handlebars

19. 	def show
		render json: Story.find(params[:id]);
	end
	stories_controller.js

20. Emb.Router.map(function() {
  this.resource('stories', function() {
 		this.resource('story', {path: ':story_id'});
 	});
});
router.js
21. {{outlet}} na koniec stories.handlebars

22. create folder stories in templates in that folder create file index.handlebars with this line :
<p> Please select a story </p>

23. rails g ember:template stories/new
24. rails g ember:route stories/new
25. this.route('new'); w srodku 
26. <p> Make a new story </p> new.handlebars

27. model: function() {
		return this.store.createRecord('story');
	}
	new_route.js

28. <form>
	<p>
		{{input type="text" value=title}}
	</p>

	<p>
		{{textarea value=body}}
	</p>
	<button> Create </button>
</form>
new.handlebars

29. Emb.StoriesRoute = Ember.Route.extend({
	model: function() {
		this.store.find('story');

		return this.store.filter('story', function(story) {
			return !story.get('isNew');
		});
	}
});
stories_route.js

30. <form {{action 'create' this on="submit"}}> 
pierwsza linijka new_route.js

31. 
Emb.StoriesNewRoute = Ember.Route.extend({
	model: function() {
		return this.store.createRecord('story');
	},

	actions: {
		create: function(story){
			var route = this;
			story.save().then(function(){
				route.transitionTo('stories');
			});
		}
	}
});

new_route.js

32. {{#if isSaving}}
		<p> Saving Record </p>
	{{/if}}
	new.handlebars zaraz pod <form>

33. 	def create
		sleep 1;
		render json: Story.create(story);		
	end

private
	def story
		params[:story].permit(:title, :body);
	end
stories_controller.rb

34. <p> {{#link-to 'stories.new'}} Create a new Story {{/link-to}} </p>
stories.handlebars

35. rails g ember:route story/edit
36. rails g ember:template story/edit

37. 
Emb.Router.map(function() {
  this.resource('stories', function() {
 		this.resource('story', {path: ':story_id'}, function(){
 			this.route('edit');
 		});
 		this.route('new');
 	});
});
router.js

38. <form {{action 'update' this on="submit"}} >
	{{#if isSaving}}
		<p> Saving Record </p>
	{{/if}}
	<p>
		{{input type="text" value=title}}
	</p>

	<p>
		{{textarea value=body}}
	</p>
	<button> Update</button>
</form>
edit.handlebars

39. 
	model: function () {
		return this.modelFor('story');
	}
	edit_route.js

40.
Emb.StoryEditRoute = Ember.Route.extend({
	model: function () {
		return this.modelFor('story');
	}
});
edit_route.js
41. 
<p> {{#link-to 'story.edit'}} Edit this Story {{/link-to}} </p>

{{outlet}}
story.handlebars

42. 
Emb.StoryEditRoute = Ember.Route.extend({
	model: function () {
		return this.modelFor('story');
	},

	actions: {
		update: function(story) {
			story.save();
		}
	}
});


edit_route.js

43.

	def update
		render json: Story.find(params[:id]).tap { |s| s.update_attributes(story) };
	end
	
edit_route.js

44. 
<button {{action 'delete' this}}>X </button>
stories.handlebars

45.
actions: {
		"delete": function(story){
			story.destroyRecord();
		}
stories_route.js

46.
	<button {{action 'delete' this}}> Delete </button>
stories.handlebars

47.
def destroy
		Story.find(params[:id]).destroy
		head 204
	end
stories.controller.rb

